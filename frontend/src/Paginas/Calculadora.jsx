import React, { useState } from 'react';
import '../Estilos/Calculadora.css';
import {
  AreaChart,
  Area,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
  CartesianGrid,
  Legend,
  ReferenceLine,
  LineChart,
  Line
} from 'recharts';

// Importamos los datos desde archivos JSON
import datosConsumoComunidades from '../Datos/consumo_medio_de_agua_de_los_hogares_por_comunidad_autonoma.json';
import datosMadrid from '../Datos/evolucion_embalsada_madrid.json';
import datosPoblacion from '../Datos/poblacion_madrid.json';
import datosWater from '../Datos/global_water_consumption.json';

// Funci√≥n que devuelve 3 datos curiosos aleatorios
function getDatosCuriososAleatorios() {
  const mensajes = [
    'Una ducha de 10 minutos gasta aproximadamente 90 litros de agua.',
    'Una lavadora consume en promedio 60 litros por ciclo.',
    'Un lavavajillas eficiente puede usar solo 10 litros por lavado.',
    'Dejar el grifo abierto al lavarte los dientes puede gastar m√°s de 10 litros por minuto.',
    'Una cisterna convencional descarga entre 6 y 12 litros por uso.',
    'Llenar una ba√±era puede requerir hasta 200 litros de agua.',
    'Un grifo que gotea puede desperdiciar m√°s de 30 litros al d√≠a.'
  ];
  return mensajes.sort(() => 0.5 - Math.random()).slice(0, 3);
}

export default function Calculadora() {
  // Estados del formulario
  const [respuestas, setRespuestas] = useState({
    duchas: '', minutosDucha: '', lavavajillas: '', friegaMano: '',
    cisterna: '', lavadora: '', jardin: '', manos: '', grifoManos: '',
    cara: '', grifoCara: '', dientes: '', grifoDientes: '',
    vasos: '', cocinar: '', otrasVeces: '', otrasGrifo: ''
  });
  const [errores, setErrores] = useState({});
  const [mostrarResultado, setMostrarResultado] = useState(false);
  const [paso, setPaso] = useState(1);
  const [datosCuriosos, setDatosCuriosos] = useState(getDatosCuriososAleatorios());

  const isMobile = window.innerWidth <= 540;

  // Actualiza respuestas y borra errores si el campo es v√°lido
  const handleChange = e => {
    const { name, value } = e.target;
    if (/^\d*$/.test(value)) {
      setRespuestas({ ...respuestas, [name]: value });
      setErrores({ ...errores, [name]: '' });
    }
  };

  // Valida que los campos del paso actual est√©n llenos
  const validarCampos = campos => {
    const nuevos = {};
    campos.forEach(c => {
      if (!respuestas[c]) nuevos[c] = 'Este campo no puede estar vac√≠o.';
    });
    setErrores(nuevos);
    return Object.keys(nuevos).length === 0;
  };

  // Calculamos el consumo total de agua con las respuestas dadas
  const calcularConsumo = () => {
    const r = respuestas;
    const suma = 
      (r.duchas * r.minutosDucha * 9) +
      (r.cisterna * 7 * 6) +
      (r.lavavajillas * 10) +
      (r.friegaMano * 40) +
      (r.lavadora * 60) +
      (r.jardin * 80) +
      (r.manos * r.grifoManos * 6) +
      (r.cara * r.grifoCara * 6) +
      (r.dientes * r.grifoDientes * 6) +
      (r.vasos * 0.25) +
      (r.cocinar * 1) +
      (r.otrasVeces * r.otrasGrifo * 6);
    return Math.round(suma);
  };

  // Reinicia el formulario
  const reiniciarFormulario = () => {
    setRespuestas({
      duchas: '', minutosDucha: '', lavavajillas: '', friegaMano: '',
      cisterna: '', lavadora: '', jardin: '', manos: '', grifoManos: '',
      cara: '', grifoCara: '', dientes: '', grifoDientes: '',
      vasos: '', cocinar: '', otrasVeces: '', otrasGrifo: ''
    });
    setErrores({});
    setPaso(1);
    setMostrarResultado(false);
    setDatosCuriosos(getDatosCuriososAleatorios());
  };

  const totalLitros = calcularConsumo();
  const consumoDiario = Math.round(totalLitros / 7);
  const nivelConsumo =
    totalLitros < 1000 ? 'Bajo ‚úÖ' :
    totalLitros < 2000 ? 'Medio ‚ö†Ô∏è' : 'Alto üö®';

  // Agrupamos preguntas por paso del formulario
  const preguntasPorPaso = {
    1: [
      { name: 'duchas', label: '¬øCu√°ntas veces te duchas a la semana?', placeholder: 'Ej: 7' },
      { name: 'minutosDucha', label: '¬øCu√°ntos minutos dura tu ducha?', placeholder: 'Ej: 10' },
      { name: 'lavavajillas', label: '¬øCu√°ntas veces usas el lavavajillas por semana?', placeholder: 'Ej: 3' },
      { name: 'friegaMano', label: '¬øCu√°ntas veces friegas a mano por semana?', placeholder: 'Ej: 4' },
      { name: 'vasos', label: '¬øCu√°ntos vasos de agua bebes al d√≠a?', placeholder: 'Ej: 8' }
    ],
    2: [
      { name: 'cisterna', label: '¬øCu√°ntas veces tiras de la cisterna al d√≠a?', placeholder: 'Ej: 5' },
      { name: 'lavadora', label: '¬øCu√°ntas veces pones la lavadora por semana?', placeholder: 'Ej: 3' },
      { name: 'manos', label: '¬øCu√°ntas veces te lavas las manos al d√≠a?', placeholder: 'Ej: 5' },
      { name: 'grifoManos', label: '¬øCu√°ntos segundos usas el grifo al lavarte las manos?', placeholder: 'Ej: 10' },
      { name: 'cocinar', label: '¬øCu√°ntos litros usas al d√≠a para cocinar?', placeholder: 'Ej: 2' }
    ],
    3: [
      { name: 'cara', label: '¬øCu√°ntas veces te lavas la cara al d√≠a?', placeholder: 'Ej: 2' },
      { name: 'grifoCara', label: '¬øCu√°ntos segundos usas el grifo al lavarte la cara?', placeholder: 'Ej: 10' },
      { name: 'dientes', label: '¬øCu√°ntas veces te lavas los dientes al d√≠a?', placeholder: 'Ej: 3' },
      { name: 'grifoDientes', label: '¬øCu√°ntos segundos usas el grifo al lavarte los dientes?', placeholder: 'Ej: 20' },
      { name: 'otrasVeces', label: '¬øCu√°ntas veces usas el grifo para otras tareas?', placeholder: 'Ej: 3' },
      { name: 'otrasGrifo', label: '¬øCu√°ntos segundos dura ese uso?', placeholder: 'Ej: 30' }
    ]
  };

  // Campos a validar por paso
  const camposPorPaso = {
    1: ['duchas', 'minutosDucha', 'lavavajillas', 'friegaMano', 'vasos'],
    2: ['cisterna', 'lavadora', 'manos', 'grifoManos', 'cocinar'],
    3: ['cara', 'grifoCara', 'dientes', 'grifoDientes', 'otrasVeces', 'otrasGrifo']
  };

  // Procesamos datos para gr√°ficos a partir de los archivos JSON
  const dataMadrid = datosMadrid.map(d => ({
    semana: d.Fecha.slice(0, 10),
    Capacidad: d.Suma_Agua_Actual
  }));

  const dataPoblacion = datosPoblacion.map(d => ({
    A√±o: d.A√±o,
    total: d.PoblacionTotal,
    hombres: d.PoblacionHombre,
    mujeres: d.PoblacionMujer
  }));

  const selectedCountries = ['Spain','USA','China','India','Brazil','Russia','Australia','Germany','Mexico'];
  const countryColors = {
    Spain: '#d32f2f', USA: '#1976d2', China: '#fbc02d', India: '#388e3c',
    Brazil: '#f57c00', Russia: '#7b1fa2', Australia: '#0288d1',
    Germany: '#689f38', Mexico: '#512da8'
  };
  const years = Array.from(new Set(datosWater.map(d=>d.Year))).sort((a,b)=>a-b);
  const pivot = years.map(year=>{
    const entry = { year };
    selectedCountries.forEach(c=>{
      const rec = datosWater.find(d=>d.Year===year && d.Country===c);
      entry[c] = rec ? rec['Per Capita Water Use (Liters per Day)'] : null;
    });
    return entry;
  });

  // Tooltip personalizado para los gr√°ficos
  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      const sorted = [...payload].sort((a,b)=> (b.value||0)-(a.value||0));
      return (
        <div className="custom-tooltip">
          <p className="label">{label}</p>
          {sorted.map(e=>(
            <p key={e.name} style={{ color: e.stroke, margin:0 }}>
              {e.name}: {e.value.toFixed(2)} L/d√≠a
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  return (
  <>
    {/* Encabezado de la secci√≥n de introducci√≥n */}
    <div className="calculadora-page">
      <h1 className="titulo-calculadora">Sobre el Proyecto</h1>
    </div>

    {/* Introducci√≥n y grafica de consumo por pa√≠s */}
    <div className="graficas-side-by-side">
      {/* Tarjeta con texto explicativo */}
      <div className="intro-card">
        <p>
          Este proyecto nace de la necesidad de ofrecer informaci√≥n clara y accesible sobre la evoluci√≥n de los recursos h√≠dricos en la Comunidad de Madrid, donde el equilibrio entre el nivel de los embalses y la creciente demanda plantea retos de sostenibilidad a corto y largo plazo.
        </p>
        <p>
          El gr√°fico muestra el consumo diario de agua per c√°pita en varios pa√≠ses entre el a√±o 2000 y 2024. Esta comparaci√≥n internacional permite comprender c√≥mo factores como el clima, la densidad de poblaci√≥n o los h√°bitos culturales influyen en el uso del agua.
        </p>
        <p>
          En el caso de Espa√±a, el consumo medio se sit√∫a entre 280 y 300 litros por persona y d√≠a, con picos estivales que reflejan el aumento de temperatura y el turismo. Estas variaciones ponen de manifiesto la importancia de promover h√°bitos de ahorro especialmente en los meses de m√°s calor.
        </p>
      </div>

      {/* Gr√°fico de consumo per c√°pita por pa√≠s */}
      <div className="grafica-container">
        <h2>Consumo diario de agua per c√°pita por pa√≠s (2000‚Äì2024)</h2>
        <ResponsiveContainer width="100%" height={350}>
          <LineChart data={pivot} margin={{ top:0, right:20, left:-25, bottom:30 }}>
            <XAxis dataKey="year" type="number" domain={['dataMin','dataMax']} allowDecimals={false} />
            <YAxis domain={[100,450]} ticks={[100,200,300,450]} tickFormatter={v=>v.toLocaleString()} />
            <Tooltip content={<CustomTooltip />} />
            {/* Oculta leyenda si es m√≥vil */}
            {!isMobile && (
              <Legend verticalAlign="top" align="center" height={36} />
            )}
            {/* L√≠nea por cada pa√≠s */}
            {selectedCountries.map(pais=>(
              <Line
                key={pais}
                type="monotone"
                dataKey={pais}
                name={pais}
                stroke={countryColors[pais]}
                dot={false}
                strokeWidth={2}
              />
            ))}
          </LineChart>
        </ResponsiveContainer>
        <p className="fuente">
          Fuente: Kaggle. Consumo diario de agua per c√°pita por pa√≠s (2000‚Äì2024).
        </p>
      </div>
    </div>

    {/* Gr√°fico de poblaci√≥n + contexto hist√≥rico */}
    <div className="graficas-side-by-side">
      {/* Gr√°fico de poblaci√≥n por a√±o */}
      <div className="grafica-container">
        <h2>Poblaci√≥n de la Comunidad de Madrid (1857‚Äì2024)</h2>
        <ResponsiveContainer width="100%" height={400}>
          <LineChart data={dataPoblacion} margin={{ top:20,right:20,left:0,bottom:-30 }}>
            <XAxis
              dataKey="A√±o"
              type="category"
              height={60}
              angle={window.innerWidth <= 540 ? -45 : 0}
              textAnchor={window.innerWidth <= 540 ? 'end' : 'middle'}
              tickFormatter={(val, i) => {
                if (window.innerWidth <= 540) {
                  return i % 10 === 0 ? val : '';
                }
                return val;
              }}
            />
            <YAxis domain={[0,'dataMax']} tickFormatter={v=>v.toLocaleString()} width={80} />
            <Tooltip formatter={v=>v.toLocaleString()} />
            <Legend verticalAlign="top" wrapperStyle={{display: window.innerWidth <= 540 ? 'none' : 'block'}} />
            <Line type="monotone" dataKey="total" name="Total" stroke="#ffa726" dot={false} />
            <Line type="monotone" dataKey="hombres" name="Hombres" stroke="#42a5f5" dot={false} />
            <Line type="monotone" dataKey="mujeres" name="Mujeres" stroke="#ec407a" dot={false} />
          </LineChart>
        </ResponsiveContainer>
        <p className="fuente">
          Fuente: Instituto de Estad√≠stica de la Comunidad de Madrid.
        </p>
      </div>

      {/* Texto hist√≥rico sobre la evoluci√≥n de la infraestructura h√≠drica */}
      <div class="intro-card">
        <p>
          El gr√°fico muestra c√≥mo la poblaci√≥n madrile√±a creci√≥ de menos de 500.000 en 1857 a m√°s de 7 millones en 2024, multiplicando por catorce la demanda de agua para usos dom√©sticos, agr√≠colas e industriales.
        </p>
        <p>
          Frente a esta demanda, en el siglo XIX se impuls√≥ el Canal de Isabel II (1851) y se levant√≥ el embalse del Pont√≥n de la Oliva (1857). 
        </p>
        <p>
          Con el fuerte crecimiento demogr√°fico entre 1960 y 1980, se llevaron a cabo obras como la ampliaci√≥n del embalse de Santillana (1969) y la construcci√≥n de El Atazar (1972), que permitieron responder a la mayor demanda de agua y reforzar la seguridad del suministro.
        </p>
        <p>
          Aunque el crecimiento poblacional se ha moderado, cada nuevo habitante incrementa la demanda sobre los recursos h√≠dricos, lo que exige planificar nuevas infraestructuras y fomentar el ahorro para equilibrar capacidad y consumo.
        </p>
      </div>
    </div>

    {/* Explicaci√≥n sobre embalses + gr√°fico de agua embalsada */}
    <div className="graficas-side-by-side">
      {/* Informaci√≥n sobre fuentes de agua y contexto de uso */}
      <div class="intro-card">
        <p>
          La Comunidad de Madrid se abastece principalmente de los r√≠os Lozoya, Jarama y Guadarrama, a trav√©s de una red de embalses gestionada por el Canal de Isabel II. Tambi√©n se reutilizan aguas depuradas y se aprovechan acu√≠feros, especialmente en periodos secos.
        </p>
        <p>
          El gr√°fico muestra la evoluci√≥n semanal del agua embalsada en Madrid (1988‚Äì2025), con subidas tras √©pocas de lluvias y ca√≠das en veranos secos como 1992, 2005 o 2017. En los meses m√°s secos, los niveles han llegado a acercarse a los 350‚ÄØhm¬≥, rozando situaciones cr√≠ticas.
        </p>
        <p>
          Es importante tener en cuenta que, como se ha visto en el gr√°fico anterior, aunque el nivel de agua embalsada actual sea similar al de a√±os anteriores, hoy la poblaci√≥n es mucho mayor y la demanda de agua tambi√©n lo es. Por tanto, el mismo volumen disponible supone una presi√≥n mayor sobre el sistema, lo que refuerza la necesidad de una gesti√≥n eficiente y una planificaci√≥n adaptada al contexto actual.
        </p>
      </div>

      {/* Gr√°fico de √°rea con niveles de agua embalsada */}
      <div className="grafica-container">
        <h2>Agua embalsada (hm¬≥) en la Comunidad de Madrid (1988‚Äì2025)</h2>
        <ResponsiveContainer width="100%" height={350}>
          <AreaChart data={dataMadrid} margin={{ top: 20, right: 10, left: -20, bottom: -30 }}>
            <XAxis
              dataKey="semana"
              angle={-60}
              textAnchor="end"
              interval={0}
              height={80}
              tickFormatter={(val,i) => {
                const yr = new Date(val).getFullYear();
                return i === 0 || i === dataMadrid.length - 1 || i % 260 === 0 ? yr : '';
              }}
              tickLine={false}
            />
            <YAxis domain={[200,1200]} ticks={[200,400,600,800,1000,1200]} tickFormatter={v => v.toLocaleString()} />
            <Tooltip formatter={v => `${v.toLocaleString()} hm¬≥`} />
            <Area type="monotone" dataKey="Capacidad" stroke="#4caf50" fill="#a5d6a7" />
          </AreaChart>
        </ResponsiveContainer>
        <p className="fuente">
          Fuente: Bolet√≠n Hidrol√≥gico Semanal, MITECO. Agua embalsada de Madrid (1988‚Äì2025).
        </p>
      </div>
    </div>

    {/* Secci√≥n llamada a la acci√≥n para usar la calculadora */}
    <div className="cta-section">
      <h2>¬øQuieres conocer tu huella h√≠drica?</h2>
      <h3>Estima tu gasto de agua con la calculadora de consumo</h3>
    </div>

    {/* Aqu√≠ arranca la calculadora interactiva */}
    <div className="calculadora-page">
      <h1 className="titulo-calculadora">Calculadora de Consumo de Agua</h1>
      <div className="calculadora-container">
        <p className="intro">
          Esta calculadora te ayuda a estimar tu consumo semanal de agua en el hogar...
        </p>

        {/* Formulario de preguntas dividido en pasos */}
        {!mostrarResultado ? (
          <div className="formulario">
            {preguntasPorPaso[paso].map(({ name, label, placeholder }) => (
              <label key={name}>
                {label}
                <input
                  type="number"
                  name={name}
                  value={respuestas[name]}
                  onChange={handleChange}
                  min="0"
                  placeholder={placeholder}
                  className={errores[name] ? 'input-error' : ''}
                />
                {errores[name] && <span className="mensaje-error">{errores[name]}</span>}
              </label>
            ))}

            {/* Navegaci√≥n entre pasos del formulario */}
            <div className="botones-finales">
              {paso > 1 && (
                <button className="button" onClick={() => setPaso(paso - 1)}>
                  Volver
                </button>
              )}
              <button
                className="button"
                onClick={() => {
                  if (validarCampos(camposPorPaso[paso])) {
                    paso < 3 ? setPaso(paso + 1) : setMostrarResultado(true);
                  }
                }}
              >
                {paso < 3 ? 'Siguiente' : 'Calcular'}
              </button>
            </div>
          </div>
        ) : (
          // Vista de resultados tras completar la calculadora
          <div className="resultado">
            <h2>Resultado Estimado</h2>
            <p>Consumo semanal: <strong>{totalLitros} L</strong></p>
            <p>Consumo diario: <strong>{consumoDiario} L</strong></p>
            <p>Nivel de consumo: <strong>{nivelConsumo}</strong></p>

            {/* Lista de datos curiosos sobre el agua */}
            <h2>Datos curiosos</h2>
            <div className="datos-curiosos">
              {datosCuriosos.map((d, i) => (
                <p key={i}>{d}</p>
              ))}
            </div>

            {/* Comparativa del consumo con datos reales por comunidad */}
            <h2 className="titulo-grafica">Consumo medio por comunidad (INE)</h2>
            <div style={{ position: 'relative', width: '100%', height: 400 }}>
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={datosConsumoComunidades.Respuesta.Datos.Metricas[0].Datos.map(d => ({
                    comunidad: d.Parametro,
                    '2020': d.Valor,
                    '2022': datosConsumoComunidades.Respuesta.Datos.Metricas[1].Datos.find(
                      x => x.Parametro === d.Parametro
                    ).Valor
                  }))}
                  margin={{ top: 20, right: 30, left: 20, bottom: 80 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="comunidad" angle={-60} textAnchor="end" />
                  <YAxis
                    domain={[0, Math.max(250, consumoDiario + 10)]}
                    label={{ value: 'L/hab/d√≠a', angle: -90, position: 'insideLeft' }}
                  />
                  <Tooltip />
                  <Legend
                    verticalAlign="top"
                    align="right"
                    payload={[
                      { value: '2020', type: 'square', color: '#90caf9' },
                      { value: '2022', type: 'square', color: '#1976d2' },
                      { value: 'Tu consumo', type: 'line', color: 'red', strokeDasharray: '3 3' }
                    ]}
                  />
                  <Bar dataKey="2020" fill="#90caf9" />
                  <Bar dataKey="2022" fill="#1976d2" />
                  <ReferenceLine y={consumoDiario} stroke="red" strokeDasharray="3 3" />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* Bot√≥n para reiniciar el formulario */}
            <button className="button" onClick={reiniciarFormulario}>
              Volver a calcular
            </button>
          </div>
        )}
      </div>
    </div>
  </>
);}